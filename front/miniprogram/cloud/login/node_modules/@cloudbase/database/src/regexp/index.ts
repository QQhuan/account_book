import { SYMBOL_REGEXP } from '../helper/symbol'

export class RegExp {
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  $regularExpression?: {
    pattern?: string
    options?: string
  }

=======
  $regex: string;
  $options: string;
>>>>>>> Stashed changes
=======
  $regex: string;
  $options: string;
>>>>>>> Stashed changes
=======
  $regex: string;
  $options: string;
>>>>>>> Stashed changes
=======
  $regex: string;
  $options: string;
>>>>>>> Stashed changes
=======
  $regex: string;
  $options: string;
>>>>>>> Stashed changes
=======
  $regex: string;
  $options: string;
>>>>>>> Stashed changes
  constructor({ regexp, options }) {
    if (!regexp) {
      throw new TypeError('regexp must be a string')
    }
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream

    this.$regularExpression = {
      pattern: regexp || '',
      options: options || ''
    }
=======
    this.$regex = regexp
    this.$options = options
>>>>>>> Stashed changes
=======
    this.$regex = regexp
    this.$options = options
>>>>>>> Stashed changes
=======
    this.$regex = regexp
    this.$options = options
>>>>>>> Stashed changes
=======
    this.$regex = regexp
    this.$options = options
>>>>>>> Stashed changes
=======
    this.$regex = regexp
    this.$options = options
>>>>>>> Stashed changes
=======
    this.$regex = regexp
    this.$options = options
>>>>>>> Stashed changes
  }

  parse() {
    return {
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
      $regularExpression: {
        pattern: this.$regularExpression.pattern,
        options: this.$regularExpression.options
      }
=======
      $regex: this.$regex,
      $options: this.$options
>>>>>>> Stashed changes
=======
      $regex: this.$regex,
      $options: this.$options
>>>>>>> Stashed changes
=======
      $regex: this.$regex,
      $options: this.$options
>>>>>>> Stashed changes
=======
      $regex: this.$regex,
      $options: this.$options
>>>>>>> Stashed changes
=======
      $regex: this.$regex,
      $options: this.$options
>>>>>>> Stashed changes
=======
      $regex: this.$regex,
      $options: this.$options
>>>>>>> Stashed changes
    }
  }

  get _internalType() {
    return SYMBOL_REGEXP
  }
}

export function RegExpConstructor(param) {
  return new RegExp(param)
}
